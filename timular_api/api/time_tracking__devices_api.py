# coding: utf-8

"""
    Timeular Public API

     Welcome to the documentation of Timeular Public API v2. If you want to have a look at the older and deprecated API v1 please just click on the following link: [Timeular Public API v1](./?v=v1)  You can try all requests here, in documentation, with use of `Try it out` button (available in each endpoint description after folding it out).  Most of endpoints are secured. In order to access them you have to provide *Access Token*. To do so, click on `Authorize` button below and provide `'Bearer *your_access_token*'` as a value for `Authorization` request header. To obtain *Access Token* you have to sign-in with pair of *API Key* and *API Secret* first. API Key & API Secret can be generated on [Profile website](https://profile.timeular.com/#/app/) or, if you have Access Token already, with `POST` request to `/developer/api-access`.  **Warning:** authentication flow may change soon due to active development of Timeular and its API.  If you have any questions, please visit [Support page](http://support.timeular.com) and ask them there.  Happy API browsing!  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from timular_api.api_client import ApiClient


class TimeTrackingDevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_device(self, device_serial, **kwargs):  # noqa: E501
        """Sets the status of a Device to active  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activate_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.activate_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def activate_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Sets the status of a Device to active  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activate_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `activate_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `activate_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_device(self, device_serial, **kwargs):  # noqa: E501
        """Removes the active status from the given Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deactivate_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deactivate_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def deactivate_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Removes the active status from the given Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deactivate_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `deactivate_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `deactivate_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}/active', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_device(self, device_serial, **kwargs):  # noqa: E501
        """Disable a Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.disable_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.disable_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def disable_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Disable a Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.disable_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `disable_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `disable_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}/disabled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_device(self, device_serial, **kwargs):  # noqa: E501
        """Edit a Device  # noqa: E501

        With this endpoint, you can set a name of your Device. The Name is trimmed automatically from leading and trailing whitespaces. You can remove name from a Device by setting it to the value null,  blank or empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.edit_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :param DeviceEditionRequest properties_to_change: properties to change
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.edit_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def edit_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Edit a Device  # noqa: E501

        With this endpoint, you can set a name of your Device. The Name is trimmed automatically from leading and trailing whitespaces. You can remove name from a Device by setting it to the value null,  blank or empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.edit_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :param DeviceEditionRequest properties_to_change: properties to change
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial', 'properties_to_change']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `edit_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `edit_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties_to_change' in params:
            body_params = params['properties_to_change']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_device(self, device_serial, **kwargs):  # noqa: E501
        """Enable a Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enable_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enable_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def enable_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Enable a Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enable_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: DeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `enable_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `enable_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}/disabled', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_known_devices(self, **kwargs):  # noqa: E501
        """List all known Devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_known_devices(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_known_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_known_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_known_devices_with_http_info(self, **kwargs):  # noqa: E501
        """List all known Devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_known_devices_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_known_devices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_device(self, device_serial, **kwargs):  # noqa: E501
        """Remove known Device  # noqa: E501

        With this endpoint, you can remove a Device from list of known Devices. In order to remove the Device, you have to make it active again with `POST` request to `/api/v2//devices/{deviceSerial}/active`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_device(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_device_with_http_info(device_serial, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_device_with_http_info(device_serial, **kwargs)  # noqa: E501
            return data

    def remove_device_with_http_info(self, device_serial, **kwargs):  # noqa: E501
        """Remove known Device  # noqa: E501

        With this endpoint, you can remove a Device from list of known Devices. In order to remove the Device, you have to make it active again with `POST` request to `/api/v2//devices/{deviceSerial}/active`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_device_with_http_info(device_serial, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_serial: Serial number of a Device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_serial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_serial' is set
        if ('device_serial' not in params or
                params['device_serial'] is None):
            raise ValueError("Missing the required parameter `device_serial` when calling `remove_device`")  # noqa: E501

        if 'device_serial' in params and not re.search('^[0-9A-Za-z-_.]{1,36}$', params['device_serial']):  # noqa: E501
            raise ValueError("Invalid value for parameter `device_serial` when calling `remove_device`, must conform to the pattern `/^[0-9A-Za-z-_.]{1,36}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_serial' in params:
            path_params['deviceSerial'] = params['device_serial']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceSerial}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
