# coding: utf-8

"""
    Timeular Public API

     Welcome to the documentation of Timeular Public API v2. If you want to have a look at the older and deprecated API v1 please just click on the following link: [Timeular Public API v1](./?v=v1)  You can try all requests here, in documentation, with use of `Try it out` button (available in each endpoint description after folding it out).  Most of endpoints are secured. In order to access them you have to provide *Access Token*. To do so, click on `Authorize` button below and provide `'Bearer *your_access_token*'` as a value for `Authorization` request header. To obtain *Access Token* you have to sign-in with pair of *API Key* and *API Secret* first. API Key & API Secret can be generated on [Profile website](https://profile.timeular.com/#/app/) or, if you have Access Token already, with `POST` request to `/developer/api-access`.  **Warning:** authentication flow may change soon due to active development of Timeular and its API.  If you have any questions, please visit [Support page](http://support.timeular.com) and ask them there.  Happy API browsing!  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from timular_api.models.note_mention import NoteMention  # noqa: F401,E501
from timular_api.models.note_tag import NoteTag  # noqa: F401,E501


class Note(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'tags': 'list[NoteTag]',
        'mentions': 'list[NoteMention]'
    }

    attribute_map = {
        'text': 'text',
        'tags': 'tags',
        'mentions': 'mentions'
    }

    def __init__(self, text=None, tags=None, mentions=None):  # noqa: E501
        """Note - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._tags = None
        self._mentions = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if tags is not None:
            self.tags = tags
        if mentions is not None:
            self.mentions = mentions

    @property
    def text(self):
        """Gets the text of this Note.  # noqa: E501


        :return: The text of this Note.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Note.


        :param text: The text of this Note.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def tags(self):
        """Gets the tags of this Note.  # noqa: E501


        :return: The tags of this Note.  # noqa: E501
        :rtype: list[NoteTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Note.


        :param tags: The tags of this Note.  # noqa: E501
        :type: list[NoteTag]
        """

        self._tags = tags

    @property
    def mentions(self):
        """Gets the mentions of this Note.  # noqa: E501


        :return: The mentions of this Note.  # noqa: E501
        :rtype: list[NoteMention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Note.


        :param mentions: The mentions of this Note.  # noqa: E501
        :type: list[NoteMention]
        """

        self._mentions = mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Note):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
