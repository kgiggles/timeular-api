# coding: utf-8

"""
    Timeular Public API

     Welcome to the documentation of Timeular Public API v2. If you want to have a look at the older and deprecated API v1 please just click on the following link: [Timeular Public API v1](./?v=v1)  You can try all requests here, in documentation, with use of `Try it out` button (available in each endpoint description after folding it out).  Most of endpoints are secured. In order to access them you have to provide *Access Token*. To do so, click on `Authorize` button below and provide `'Bearer *your_access_token*'` as a value for `Authorization` request header. To obtain *Access Token* you have to sign-in with pair of *API Key* and *API Secret* first. API Key & API Secret can be generated on [Profile website](https://profile.timeular.com/#/app/) or, if you have Access Token already, with `POST` request to `/developer/api-access`.  **Warning:** authentication flow may change soon due to active development of Timeular and its API.  If you have any questions, please visit [Support page](http://support.timeular.com) and ask them there.  Happy API browsing!  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from timeular_api.api_client import ApiClient


class TimeTrackingReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def generate_csv_report(self, start_timestamp, stop_timestamp, timezone, **kwargs):  # noqa: E501
        """Generate CSV Report  # noqa: E501

        Generates Report in CSV which contains all the Time Entries from inside given time range. If some Time Entry exceeds report's time range, only matching part will be included.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_csv_report(start_timestamp, stop_timestamp, timezone, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_timestamp: eg. `2016-01-01T00:00:00.000` (required)
        :param str stop_timestamp: eg. `2017-12-31T23:59:59.999` (required)
        :param str timezone: Time-zone in which `StartDate` and `EndDate` columns will be shown, eg. `Europe/Berlin`. It honors Daylight Saving Time changes of given region.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generate_csv_report_with_http_info(start_timestamp, stop_timestamp, timezone, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_csv_report_with_http_info(start_timestamp, stop_timestamp, timezone, **kwargs)  # noqa: E501
            return data

    def generate_csv_report_with_http_info(self, start_timestamp, stop_timestamp, timezone, **kwargs):  # noqa: E501
        """Generate CSV Report  # noqa: E501

        Generates Report in CSV which contains all the Time Entries from inside given time range. If some Time Entry exceeds report's time range, only matching part will be included.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_csv_report_with_http_info(start_timestamp, stop_timestamp, timezone, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_timestamp: eg. `2016-01-01T00:00:00.000` (required)
        :param str stop_timestamp: eg. `2017-12-31T23:59:59.999` (required)
        :param str timezone: Time-zone in which `StartDate` and `EndDate` columns will be shown, eg. `Europe/Berlin`. It honors Daylight Saving Time changes of given region.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_timestamp', 'stop_timestamp', 'timezone']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_csv_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_timestamp' is set
        if ('start_timestamp' not in params or
                params['start_timestamp'] is None):
            raise ValueError("Missing the required parameter `start_timestamp` when calling `generate_csv_report`")  # noqa: E501
        # verify the required parameter 'stop_timestamp' is set
        if ('stop_timestamp' not in params or
                params['stop_timestamp'] is None):
            raise ValueError("Missing the required parameter `stop_timestamp` when calling `generate_csv_report`")  # noqa: E501
        # verify the required parameter 'timezone' is set
        if ('timezone' not in params or
                params['timezone'] is None):
            raise ValueError("Missing the required parameter `timezone` when calling `generate_csv_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'start_timestamp' in params:
            path_params['startTimestamp'] = params['start_timestamp']  # noqa: E501
        if 'stop_timestamp' in params:
            path_params['stopTimestamp'] = params['stop_timestamp']  # noqa: E501

        query_params = []
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain;charset=UTF-8', 'application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationHeader']  # noqa: E501

        return self.api_client.call_api(
            '/report/{startTimestamp}/{stopTimestamp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
