# coding: utf-8

"""
    Timeular Public API

     Welcome to the documentation of Timeular Public API v2. If you want to have a look at the older and deprecated API v1 please just click on the following link: [Timeular Public API v1](./?v=v1)  You can try all requests here, in documentation, with use of `Try it out` button (available in each endpoint description after folding it out).  Most of endpoints are secured. In order to access them you have to provide *Access Token*. To do so, click on `Authorize` button below and provide `'Bearer *your_access_token*'` as a value for `Authorization` request header. To obtain *Access Token* you have to sign-in with pair of *API Key* and *API Secret* first. API Key & API Secret can be generated on [Profile website](https://profile.timeular.com/#/app/) or, if you have Access Token already, with `POST` request to `/developer/api-access`.  **Warning:** authentication flow may change soon due to active development of Timeular and its API.  If you have any questions, please visit [Support page](http://support.timeular.com) and ask them there.  Happy API browsing!  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from timeular_api.models.note import Note  # noqa: F401,E501
from timeular_api.models.time_entry_activity_response import TimeEntryActivityResponse  # noqa: F401,E501
from timeular_api.models.time_entry_duration_response import TimeEntryDurationResponse  # noqa: F401,E501


class TimeEntryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'activity': 'TimeEntryActivityResponse',
        'duration': 'TimeEntryDurationResponse',
        'note': 'Note'
    }

    attribute_map = {
        'id': 'id',
        'activity': 'activity',
        'duration': 'duration',
        'note': 'note'
    }

    def __init__(self, id=None, activity=None, duration=None, note=None):  # noqa: E501
        """TimeEntryResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._activity = None
        self._duration = None
        self._note = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if activity is not None:
            self.activity = activity
        if duration is not None:
            self.duration = duration
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this TimeEntryResponse.  # noqa: E501


        :return: The id of this TimeEntryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeEntryResponse.


        :param id: The id of this TimeEntryResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def activity(self):
        """Gets the activity of this TimeEntryResponse.  # noqa: E501


        :return: The activity of this TimeEntryResponse.  # noqa: E501
        :rtype: TimeEntryActivityResponse
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this TimeEntryResponse.


        :param activity: The activity of this TimeEntryResponse.  # noqa: E501
        :type: TimeEntryActivityResponse
        """

        self._activity = activity

    @property
    def duration(self):
        """Gets the duration of this TimeEntryResponse.  # noqa: E501


        :return: The duration of this TimeEntryResponse.  # noqa: E501
        :rtype: TimeEntryDurationResponse
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeEntryResponse.


        :param duration: The duration of this TimeEntryResponse.  # noqa: E501
        :type: TimeEntryDurationResponse
        """

        self._duration = duration

    @property
    def note(self):
        """Gets the note of this TimeEntryResponse.  # noqa: E501


        :return: The note of this TimeEntryResponse.  # noqa: E501
        :rtype: Note
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TimeEntryResponse.


        :param note: The note of this TimeEntryResponse.  # noqa: E501
        :type: Note
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeEntryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
